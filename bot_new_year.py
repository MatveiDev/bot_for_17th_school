#imports 

import random
import re
from pymongo import MongoClient
from aiogram import Dispatcher, Bot, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import API_TOKEN

#api_token

token = API_TOKEN
bot = Bot(token)
dp = Dispatcher(bot, storage=MemoryStorage())

#database

cluster = MongoClient('mongodb+srv://matveidev:antipova1977@cluster0.sfhubs3.mongodb.net/')

db = cluster['DB_NY']
collection_wishes = db['collection_wishes']

#states

class ClientStates(StatesGroup):

	wish = State()

#check_in

check_in = {'üéÖ –ù–æ–≤–æ—Ä—ñ—á–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –®–Ü', 'üéÑ –ü–æ–±–∞–∂–∞—Ç–∏ —â–æ—Å—å', 'üëå –¢–∞–∫'}

#keyboards

keyboard_main=ReplyKeyboardMarkup(
        [
            [
                KeyboardButton("üéÖ –ù–æ–≤–æ—Ä—ñ—á–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –®–Ü")
            ],
			[
                KeyboardButton("üéÑ –ü–æ–±–∞–∂–∞—Ç–∏ —â–æ—Å—å")
            ],
			[
				KeyboardButton("üìñ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –¥–æ—à–∫—É –ø–æ–±–∞–∂–∞–Ω—å")
            ]
        ],

        resize_keyboard=True,
    )

#functions

def ai_list():
	list = ['–ï–Ω–µ—Ä–≥—ñ—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∫—É –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î –±–∞–≥–∞—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –∑–º—ñ–Ω.',
        '–ì–ª–æ–±–∞–ª—å–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∏ –¥–ª—è –±–æ—Ä–æ—Ç—å–±–∏ –∑ –∫–ª—ñ–º–∞—Ç–∏—á–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏ –æ—Ç—Ä–∏–º–∞—é—Ç—å –Ω–æ–≤–∏–π –ø–æ—à—Ç–æ–≤—Ö.',
        '–ï–∫–æ–ª–æ–≥—ñ—á–Ω–æ —á–∏—Å—Ç—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Å—Ç–∞–Ω—É—Ç—å –±—ñ–ª—å—à –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ –∑–∞–≥–∞–ª—É.',
        '–†–æ–∑–≤–∏—Ç–æ–∫ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π —É –≥–∞–ª—É–∑—ñ –º–µ–¥–∏—Ü–∏–Ω–∏ –∑—Ä–æ–±–∏—Ç—å –ª—ñ–∫—É–≤–∞–Ω–Ω—è –±—ñ–ª—å—à –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º.',
        '–í–µ–ª–∏–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤–∏—Ö –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤ —É –≥–∞–ª—É–∑—ñ –Ω–∞—É–∫–∏.',
        '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–µ—Å—É –¥–æ –∫–æ—Å–º–æ—Å—É, –Ω–æ–≤—ñ –º—ñ—Å—ñ—ó —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É –∫–æ—Å–º—ñ—á–Ω–æ–º—É –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—ñ.',
        '–†–æ–∑–≤–∏—Ç–æ–∫ —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–æ—ó —ó–∂—ñ —Ç–∞ –±—ñ–æ—ñ–Ω–∂–µ–Ω–µ—Ä—ñ—ó.',
        '–ó–º–µ–Ω—à–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ —Ç–∞ –ø–∞–∫—É–≤–∞–Ω–Ω—è.',
        '–ü—Ä–∏—à–≤–∏–¥—à–µ–Ω–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫ –µ–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –µ–Ω–µ—Ä–≥—ñ—ó.',
        '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ —Å–æ–Ω—è—á–Ω–æ—ó –µ–Ω–µ—Ä–≥—ñ—ó —Ç–∞ –≤—ñ—Ç—Ä–æ–µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏.',
        '–ü–æ–¥–∞–ª—å—à–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ—ó —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ.',
        '–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≤—ñ–π–Ω–∏.',
        '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.',
        '–ù–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –ª—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø—Å–∏—Ö—ñ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤`—è.',
        '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–∞ —Å–µ—Ä–µ–¥ –º–æ–ª–æ–¥—ñ.',
        '–ü–æ—Å–∏–ª–µ–Ω–Ω—è —É–≤–∞–≥–∏ –¥–æ –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É.',
        '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤ –¥–ª—è –±–æ—Ä–æ—Ç—å–±–∏ –∑ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—é.',
        '–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —É–≤–∞–≥–∏ –¥–æ –ø—Ä–æ–±–ª–µ–º –≥–µ–Ω–¥–µ—Ä–Ω–æ—ó —Ä—ñ–≤–Ω–æ—Å—Ç—ñ.',
        '–°–ø—Ä–∏—è–Ω–Ω—è —Ä–æ–∑–≤–∏—Ç–∫—É —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –≤–æ–¥–∏ —Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è.',
        '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –≤–µ–≥–∞–Ω—Å—å–∫–æ—ó —Ç–∞ —Ä–æ—Å–ª–∏–Ω–Ω–æ—ó –¥—ñ—î—Ç–∏.',
        '–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –¥–ª—è –≥–Ω—É—á–∫–æ—ó —Ä–æ–±–æ—Ç–∏ —Ç–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.',
        '–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è “ë—Ä—É–Ω—Ç—ñ–≤ —Ç–∞ –ª—ñ—Å—ñ–≤.',
        '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–µ—Å—É –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±—ñ–æ—Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç—Ç—è.',
        '–ü–æ—Å–∏–ª–µ–Ω–Ω—è –∫—ñ–±–µ—Ä–∑–∞—Ö–∏—Å—Ç—É —Ç–∞ –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∏.',
        '–í–µ–ª–∏–∫—ñ –∫—Ä–æ–∫–∏ —É —Ä–æ–∑–≤–∏—Ç–∫—É —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É.',
        '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤ –¥–ª—è –∑–∞–æ—Ö–æ—á–µ–Ω–Ω—è —á–∏—Å—Ç–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞–Ω–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞.',
        '–†–æ–∑–≤–∏—Ç–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –æ—á–∏—â–µ–Ω–Ω—è –æ–∫–µ–∞–Ω—ñ–≤ –≤—ñ–¥ –ø–ª–∞—Å—Ç–∏–∫—É.',
        '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π —É –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –µ–Ω–µ—Ä–≥—ñ—ó.',
        '–†–æ–∑–≤–∏—Ç–æ–∫ –≥—ñ–¥—Ä–æ–ø–æ–Ω—ñ–∫–∏ —Ç–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–µ–º–ª–µ—Ä–æ–±—Å—Ç–≤–∞.',
        '–ü–æ—Å–∏–ª–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—ñ–≤ –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –ø—Ä–∞–≤ —Ç–≤–∞—Ä–∏–Ω.',
        '–†–æ–∑–≤–∏—Ç–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –¥–ª—è –ø–µ—Ä–µ—Ä–æ–±–∫–∏ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—Ç–æ—Ä–∏–Ω–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤.',
        '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –º–∞—Å–æ–≤–æ–≥–æ —Å–ø–æ—Ä—Ç—É —Ç–∞ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è.',
        '–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ–æ—Ä–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ—Ä–æ–±–∫–∏ –≤—ñ–¥—Ö–æ–¥—ñ–≤.',
        '–†–æ–∑–≤–∏—Ç–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–æ–¥–∏ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–æ–¥–Ω–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏.',
        '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è —É–≤–∞–≥–∏ –¥–æ –ø—Ä–æ–±–ª–µ–º–∏ –≥–æ–ª–æ–¥—É –≤ —Å–≤—ñ—Ç—ñ —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –º–µ—Ç–æ–¥—ñ–≤ –±–æ—Ä–æ—Ç—å–±–∏ –∑ –Ω–µ—é.',
        '–í–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏ —Ç–∞ —ó—ó –≤—Ç–æ—Ä–∏–Ω–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.',
        '–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–µ—Å—É –¥–æ –º—ñ—Å—Ü–µ–≤–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ —Ç–∞ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è.',
        '–ü–æ—Å–∏–ª–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Ç–∞ –∑–∞—Ö–∏—Å—Ç—É –æ–∫–µ–∞–Ω—ñ–≤.',
        '–í–µ–ª–∏–∫—ñ –∫—Ä–æ–∫–∏ —É –Ω–∞–ø—Ä—è–º–∫—É —Ä–æ–∑–≤–∏—Ç–∫—É –∫–æ—Å–º—ñ—á–Ω–æ–≥–æ —Ç—É—Ä–∏–∑–º—É.',
        '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π —É –ø—Ä–æ–µ–∫—Ç–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—Å—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è',
        '–í–µ–ª–∏–∫—ñ –∫—Ä–æ–∫–∏ —É –Ω–∞–ø—Ä—è–º–∫—É —Ä–æ–∑–≤–∏—Ç–∫—É –∫–æ—Å–º—ñ—á–Ω–æ–≥–æ —Ç—É—Ä–∏–∑–º—É.']
	
	result = random.choice(list)
	return result

def user_insertation(user_id, wish):
	
    wishes_list = {
		'id': user_id,
		'prompt': wish
    }
    result_func = '–í–∞—à–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–µ !'
	
    collection_wishes.insert_one(wishes_list)
	
    return result_func

#start message

@dp.message_handler(commands=['start'])
async def start_buttons(message: types.Message):

    keyboard_main=ReplyKeyboardMarkup(
        [
            [
                KeyboardButton("üéÖ –ù–æ–≤–æ—Ä—ñ—á–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –®–Ü")
            ],
			[
                KeyboardButton("üéÑ –ü–æ–±–∞–∂–∞—Ç–∏ —â–æ—Å—å")
            ],
			[
				KeyboardButton("üìñ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –¥–æ—à–∫—É –ø–æ–±–∞–∂–∞–Ω—å")
            ]
        ],

        resize_keyboard=True,
    )

    await message.answer(

        f'–ü—Ä–∏–≤–µ—Ç, *{message.from_user.first_name}*!\n\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫–∏–π:',

        reply_markup=keyboard_main,

        parse_mode='Markdown',

    )

#handlers

@dp.message_handler(lambda message: message.text == 'üéÖ –ù–æ–≤–æ—Ä—ñ—á–Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –®–Ü', state=None)
async def prediction(message: types.Message):

	await message.answer(f'–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –®–Ü –Ω–∞ –ø—Ä–∏–π–¥–µ—à–Ω—ñ–π —Ä—ñ–∫ –¥–ª—è –Ω–∞—à–æ—ó –∫—Ä–∞—ó–Ω–∏ : "{ai_list()}"')

@dp.message_handler(lambda message: message.text == 'üéÑ –ü–æ–±–∞–∂–∞—Ç–∏ —â–æ—Å—å', state=None)
async def wish_keyboard(message: types.Message):
	
	keyboard_wish=ReplyKeyboardMarkup(
        [
            [
                KeyboardButton("üëå –¢–∞–∫")
            ],
			[
                KeyboardButton("üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É")
            ]
        ],

        resize_keyboard=True,
    )
	await message.answer('–í–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Å–≤–æ—î –ø–æ–±–∞–∂–∞–Ω–Ω—è?', reply_markup=keyboard_wish)

@dp.message_handler(lambda message: message.text == 'üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É', state=None)
async def back(message: types.Message):

    await message.reply('–í–∏–∫–æ–Ω–∞–Ω–æ !', reply_markup=keyboard_main)

@dp.message_handler(lambda message: message.text == 'üëå –¢–∞–∫', state=None)
async def create_wish(message: types.Message):

	await ClientStates.wish.set()
	await message.answer('–í–≤–µ–¥—ñ—Ç—å –ø–æ–±–∞–∂–∞–Ω–Ω—è :')
	
@dp.message_handler(state=ClientStates.wish)
async def load_wish(message: types.Message, state: FSMContext):
	async with state.proxy() as data:

		data['wish'] = message.text
		user_id = message.from_user.username
		users_records = collection_wishes.find_one({'id': user_id})
		user_text = message.text

		if user_text == 'üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É':

			await message.reply('–í–∏–∫–æ–Ω–∞–Ω–æ!', reply_markup=keyboard_main)
			await state.finish()
			
		elif user_text in check_in:

			await state.finish()
			await message.answer('–ê–Ω—Ç–∏—Å–ø–∞–º', reply_markup=keyboard_main)
		
		elif users_records == None:
			
			await message.reply(f"{user_insertation(user_id, data['wish'])}")
		else:
			
			await message.reply('–í–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è –∞–±–æ —É –≤–∞—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö')
			await message.answer('–ù–µ–≥–∞–π–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —É —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —ñ–∑ –∑–∞—Å—Ç–æ—Å—É–Ω–∫–æ–º')
			await state.finish()

@dp.message_handler(lambda message: message.text == 'üìñ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ –¥–æ—à–∫—É –ø–æ–±–∞–∂–∞–Ω—å', state=None)
async def prediction(message: types.Message):
	
    array = collection_wishes.find({}, {'id': 1, 'prompt': 1})

    response = "–°–ø–∏—Å–æ–∫ –ø–æ–±–∞–∂–∞–Ω—å:\n"
    for user in array:
        response += f"\n@{user['id']} - {user['prompt']}\n"
        substring_to_remove = f"\n@{user['id']} - {user['prompt']}\n"
        if user['prompt'] == 'null':
            response = re.sub(substring_to_remove, "", response)
	

    if len(response) <= 4096:
        await message.reply(response)
    else:
        while response:
            chunk, response = response[:4096], response[4096:]
            await message.reply(chunk)

#bot pooling

if __name__ == '__main__':

	executor.start_polling(dp, skip_updates=True)